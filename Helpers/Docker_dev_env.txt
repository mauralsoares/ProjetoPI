# Ambiente de Desenvolvimento React/Vite com Docker Compose

## Porquê configurar assim?
- Não precisas rebuildar o Docker a cada alteração no código.
- Hot reload: alterações aparecem automaticamente no browser.
- O código corre em container, igual ao ambiente de produção.
- Fácil integração com backend via proxy.

---

## 1. docker-compose.yaml (adiciona o serviço de desenvolvimento)

services:
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - dsa-network

  frontend-dev:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev -- --host
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - dsa-network

networks:
  dsa-network:
    driver: bridge

volumes:
  db_data:

---

## 2. vite.config.js (configuração para dev e proxy opcional)

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  root: path.resolve(__dirname, 'src'),
  build: {
    outDir: '../dist',
    emptyOutDir: true
  },
  css: {
    preprocessorOptions: {
      scss: {
        quietDeps: true,
        includePaths: ['node_modules']
      }
    }
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, 'src')
    }
  },
  server: {
    host: '0.0.0.0',
    port: 5173,
    // Descomenta e ajusta o proxy se precisares de comunicar com o backend via /api
    // proxy: {
    //   '/api': 'http://backend:PORT'
    // }
  }
})

---

## 3. package.json (confirma o script dev)

{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "vite preview"
  }
  // ...restante do ficheiro...
}

---

## 4. Como usar no dia a dia

1. Abre o terminal na pasta do frontend (onde está o docker-compose.yaml).
2. Inicia o modo desenvolvimento:
   docker-compose up frontend-dev
3. Acede ao frontend no browser:
   http://localhost:5173
4. Edita o código normalmente no teu editor.
   As alterações aparecem automaticamente no browser (hot reload).

---

## 5. (Opcional) Proxy para o backend

Se o teu backend está noutro container, ativa o proxy no vite.config.js:

server: {
  host: '0.0.0.0',
  port: 5173,
  proxy: {
    '/api': 'http://backend:PORT' // Substitui "backend" e "PORT" pelo nome e porta do teu serviço backend
  }
}

---

## 6. Produção

Quando quiseres gerar a versão final para deploy, usa o serviço frontend (porta 80), que faz o build e serve os ficheiros estáticos com Nginx.

---

# Resumo dos comandos

- Iniciar o modo dev:
  docker-compose up frontend-dev
- Parar o modo dev:
  docker-compose down
